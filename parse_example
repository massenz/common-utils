#!/usr/bin/env bash
#
# Copyright (c) 2022 AlertAvert.com.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0
# http://www.apache.org/licenses/LICENSE-2.0
#
# Author: Marco Massenzio (marco@alertavert.com)
#
#
# Example script for the `parse-args` script
#
# Usage: parse_example [-h] [--keep] [--take TAKE] --counts COUNTS [--mount MOUNT]
#
# Use `./parse_example -h` to get a full description of the available CLI args that
# this command makes available to the script.
#
# This prevents `source` to be invoked at all (and most likely error out)
# when parse-args fails to parse the given arguments.
set -e

# No modified indicates an optional, "regular" --option flag, named as the argument.
# A trailing `-` denotes a bool flag (its presence will set the associated variable, no
# value expected); use `!` for a required named option, and `+` for a required positional.
# Use `?` for an optional positional arg.
PARSED=$(.parse-args keep- take counts! mount+ attach? -- $@)
source ${PARSED}

# For example:
#
#   $ ./parse_example --keep --take 3 --counts 5 /dev/fpo
#   Keeping mount: /dev/fpo
#   Take 3, counts: 5
#   attach was: []

# Here we are using the parsed arguments as ordinary bash variables.
if [[ -n ${keep} ]]; then
  echo "Keeping mount: ${mount}"
fi

echo "Take ${take}, counts: ${counts}"

# The last positional, `attach` was optional, so it may be empty or not;
# and, if empty, it won't cause an error.
echo "attach was: [${attach}]"

# This is optional, and removes the temporary file.
rm ${PARSED}
